/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateAnimalArgs } from "./CreateAnimalArgs";
import { UpdateAnimalArgs } from "./UpdateAnimalArgs";
import { DeleteAnimalArgs } from "./DeleteAnimalArgs";
import { AnimalFindManyArgs } from "./AnimalFindManyArgs";
import { AnimalFindUniqueArgs } from "./AnimalFindUniqueArgs";
import { Animal } from "./Animal";
import { Pet } from "../../pet/base/Pet";
import { AnimalService } from "../../app/animal/services/animal.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Animal)
export class AnimalResolverBase {
  constructor(
    protected readonly service: AnimalService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Animal",
    action: "read",
    possession: "any",
  })
  async _animalsMeta(
    @graphql.Args() args: AnimalFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Animal])
  @nestAccessControl.UseRoles({
    resource: "Animal",
    action: "read",
    possession: "any",
  })
  async animals(@graphql.Args() args: AnimalFindManyArgs): Promise<Animal[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Animal, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Animal",
    action: "read",
    possession: "own",
  })
  async animal(
    @graphql.Args() args: AnimalFindUniqueArgs
  ): Promise<Animal | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Animal)
  @nestAccessControl.UseRoles({
    resource: "Animal",
    action: "create",
    possession: "any",
  })
  async createAnimal(@graphql.Args() args: CreateAnimalArgs): Promise<Animal> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        pet: args.data.pet
          ? {
              connect: args.data.pet,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Animal)
  @nestAccessControl.UseRoles({
    resource: "Animal",
    action: "update",
    possession: "any",
  })
  async updateAnimal(
    @graphql.Args() args: UpdateAnimalArgs
  ): Promise<Animal | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          pet: args.data.pet
            ? {
                connect: args.data.pet,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Animal)
  @nestAccessControl.UseRoles({
    resource: "Animal",
    action: "delete",
    possession: "any",
  })
  async deleteAnimal(
    @graphql.Args() args: DeleteAnimalArgs
  ): Promise<Animal | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Pet, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Pet",
    action: "read",
    possession: "any",
  })
  async pet(@graphql.Parent() parent: Animal): Promise<Pet | null> {
    const result = await this.service.getPet(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
